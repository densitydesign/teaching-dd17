{"version":3,"file":"component---src-pages-about-js-22eb56bed9279e70ea03.js","mappings":"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","sources":["webpack://phase-03/./src/pages/about.js"],"sourcesContent":["import * as React from 'react';\nimport {graphql, Link} from 'gatsby';\nimport {useLayoutEffect} from 'react';\nimport gsap from 'gsap';\nimport {ScrollTrigger} from 'gsap/ScrollTrigger';\nimport Layout from '../components/Layout';\nimport Button from '../components/Button';\nimport Image from '../components/Image';\nimport petitionJson from '../data/petition.json';\nimport commentJson from '../data/sample-comments.json';\n\ngsap.registerPlugin(ScrollTrigger);\n\nfunction HoverImage({children, component: Component, image, imageUrl, ...props}) {\n  const imgClassName = 'transition-transform fixed z-[-1] hidden opacity-50 top-0 left-0';\n\n  return (\n    <span className=\"relative \">\n      <span\n        className=\"underline\"\n        {...props}\n        onMouseMove={e => {\n          e.target.parentNode.querySelector('img').style.display = 'block';\n          e.target.parentNode.querySelector(\n            'img'\n          ).style.transform = `translateX(calc(${e.clientX}px - 50%)) translateY(calc(${e.clientY}px - 50%))`;\n        }}\n        onMouseLeave={e => {\n          e.target.parentNode.querySelector('img').style.display = 'none';\n        }}\n      >\n        {children}\n      </span>\n      {image && (\n        <Image\n          image={image}\n          className={imgClassName}\n          style={{\n            minWidth: '20vw',\n            transitionDuration: '100ms',\n            transitionTimingFunction: 'cubic-bezier(0.34, 1.56, 0.64, 1)',\n          }}\n        />\n      )}\n      {imageUrl && (\n        <img\n          src={imageUrl}\n          className={imgClassName}\n          style={{\n            minWidth: '20vw',\n            transitionDuration: '100ms',\n            transitionTimingFunction: 'cubic-bezier(0.34, 1.56, 0.64, 1)',\n          }}\n        />\n      )}\n    </span>\n  );\n}\n\nHoverImage.defaultProps = {\n  components: 'span',\n};\n\nexport default function About({\n  data: {\n    images: {nodes: images},\n    meme,\n    team: {nodes: team},\n  },\n}) {\n  useLayoutEffect(() => {\n    let scrollSpy;\n    import('bootstrap').then(({ScrollSpy}) => {\n      scrollSpy = new ScrollSpy(document.body, {\n        target: '#about-nav',\n        offset: 140,\n      });\n    });\n\n    return () => scrollSpy?.dispose();\n  }, []);\n\n  return (\n    <Layout container footer light>\n      <h2 className=\"text-xl lg:text-[4.34vw] leading-[1.15] uppercase\">\n        Opinion library is a website built to explore the language and arguments used in comments to\n        petitions regarding the mask mandate in the United States.\n      </h2>\n\n      <div className=\"mt-32 grid lg:grid-cols-3 gap-x-8\">\n        <article className=\"lg:col-span-2 relative z-10 overflow-hidden\">\n          <p>\n            The research presented in this website was carried out during the Final Synthesis Studio\n            of the Master Degree in Communication Design offered by Politecnico di Milano.\n          </p>\n          <p>\n            The research examined petitions published on change.org during the pandemic. Starting\n            from an analysis of the main petition themes across different countries, the focus of\n            the research narrowed down to the images and language used on the platform.\n          </p>\n          <p>\n            The aim of this website is to make the dataset used in this research available to\n            researchers and potential activists interested in the subject. To do this, we set\n            ourselves the objective of realising a tool to explore the language and arguments used\n            in comments to petitions regarding the mask mandate in the{' '}\n            <HoverImage imageUrl=\"https://media4.giphy.com/media/UPm8BqL6igDUPZ29ik/200.gif\">\n              United States\n            </HoverImage>\n            .\n          </p>\n\n          <section id=\"data\">\n            <h2>Data</h2>\n            <p>\n              Comments on change.org differ slightly from comments on other platforms. Only those\n              who signed a petition can leave a comment on it, as the platform intends comments as\n              \"reasons to sign\" and prompts users to explain why they signed right after they do so.\n              This means there are no comments against a petition but only comments supporting it.\n            </p>\n            <p>\n              When publishing a petition on change.org, users must add at least one tag to indicate\n              its general subject. Tags differ from country to country, and the{' '}\n              <HoverImage imageUrl=\"https://c.tenor.com/HbNBhv5Qt3cAAAAC/reaction-trump.gif\">\n                United States is the only country\n              </HoverImage>{' '}\n              with tags both in favour and against the same issue: mask mandates. Finding this\n              interesting, we decided to collect all the petitions that used these tags.\n            </p>\n            <p>\n              The first step was compiling a list of all the tags related to mask mandates and group\n              them according to their position: in favour or against.\n            </p>\n            <div>\n              <Image\n                image={images.find(i => i.relativePath === 'about/tags.png')}\n                className=\"mx-auto w-full lg:w-7/12\"\n              />\n            </div>\n            <p>\n              We then made a list of all the petitions presenting at least one of the tags above.\n              Since there was no easy way to do this from the website, we wrote a script in python\n              to do this for us. The script sends requests to change.org's server-side API, asking\n              for all the petitions tagged with a specific tag. The server then answers back with a{' '}\n              <HoverImage imageUrl=\"https://media.giphy.com/media/xT3i16tDII3UHUpjVe/giphy.gif\">\n                *.json\n              </HoverImage>{' '}\n              file containing all the petitions we asked for â€” this includes the title, body, image,\n              signature count, etc.\n            </p>\n            <div className=\"text-base w-full overflow-hidden border-2 border-black rounded-3xl w-full lg:w-7/12 mx-auto\">\n              <h3 className=\"bg-black text-white px-8 py-4 sticky top-0 left-0 select-none\">\n                <code>petition.json</code>\n              </h3>\n              <pre className=\"px-8 py-4 h-96 bg-white overflow-scroll no-scrollbar rounded-b-3xl\">\n                {JSON.stringify(petitionJson.items[0].petition, null, 2)}\n              </pre>\n            </div>\n            <p>\n              We filtered the petitions, selecting only the 100 most signed in both groups. Once we\n              had the petitions, we could use their ID to ask the API for their comments. Once\n              again, the server answered back with a *.json file containing all the comments for\n              each petition.\n            </p>\n\n            <div className=\"text-base w-full overflow-hidden border-2 border-black rounded-3xl w-full lg:w-7/12 mx-auto\">\n              <h3 className=\"bg-black text-white px-8 py-4 sticky top-0 left-0 select-none\">\n                <code>comments.json</code>\n              </h3>\n              <pre className=\"px-8 py-4 h-96 bg-white overflow-scroll  rounded-b-3xl no-scrollbar\">\n                {JSON.stringify(commentJson.items, null, 2)}\n              </pre>\n            </div>\n            <p>\n              Once all the comments were gathered, we used Google Natural Language API to extract\n              entities from the dataset â€” these are words and n-grams. This was a quick and easy way\n              to get rid of punctuation, articles, conjunctions and verbs.\n            </p>\n\n            <div>\n              <Image\n                image={images.find(i => i.relativePath === 'about/google-nl.png')}\n                className=\"mx-auto w-full lg:w-7/12\"\n              />\n            </div>\n\n            <p>\n              At this point, we counted how many times each word appeared and converted the absolute\n              number to percentage values for both groups.\n            </p>\n            <div>\n              <Image\n                image={images.find(i => i.relativePath === 'about/sheets.png')}\n                onClick={() =>\n                  window.open(\n                    'https://docs.google.com/spreadsheets/d/1XJLmkWSeTswgk32Ap1tPVyqcX_qy__h7pV7zGfd067Y/edit?usp=sharing',\n                    '_blank'\n                  )\n                }\n                className=\"mx-auto w-full lg:w-7/12 cursor-pointer\"\n              />\n            </div>\n\n            <p>\n              We then used these percentages to determine whether the word was used with the same\n              frequency by both groups or if one used it more than the other. We used the following\n              proportion to transform the two percentages into a single, more readable metric.\n            </p>\n            <div>\n              <Image\n                image={images.find(i => i.relativePath === 'about/normalize.png')}\n                onClick={() =>\n                  window.open(\n                    'https://docs.google.com/spreadsheets/d/1XJLmkWSeTswgk32Ap1tPVyqcX_qy__h7pV7zGfd067Y/edit?usp=sharing',\n                    '_blank'\n                  )\n                }\n                className=\"mx-auto w-full lg:w-7/12\"\n              />\n            </div>\n          </section>\n\n          <section id=\"interactions\">\n            <h2>Interactions</h2>\n            <p>\n              The archive presents two kinds of information: how often a word is used by a certain\n              group and which are the comments mentioning that word. Presenting both information to\n              the same panel would result in an overcrowded interface,{' '}\n              <HoverImage imageUrl=\"https://i.pinimg.com/originals/93/a6/42/93a642306c8514a49749bdd557c4b46a.gif\">\n                confusing the user\n              </HoverImage>\n              .\n            </p>\n            <p>\n              For this reason we decided to present the information in two different screens:\n              related words and opinions. Such a division also allowed us to give sequentiality to\n              the navigation, forcing the user to see how a word is used before reading the\n              comments. This offers preliminary information to the user while theyâ€™re deciding which\n              comments to read while also allowing them to understand the context of the comments\n              theyâ€™re reading of one and the{' '}\n              <HoverImage imageUrl=\"https://aptly.de/wp-content/uploads/2016/03/When-I-send-requirements-to-another-scrum-team.gif\">\n                other side\n              </HoverImage>\n              .\n            </p>\n          </section>\n\n          <section id=\"team\">\n            <h2 id=\"team\">The team</h2>\n            <p>This project was created by:</p>\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n              {team.map((t, i) => (\n                <div className=\"relative group\" key={t.publicURL}>\n                  <Image\n                    image={meme.nodes[i]}\n                    className=\"absolute opacity-0  group-hover:opacity-100 z-[-1] group-hover:z-20 right-1/2 top-1/2 -translate-y-1/2 translate-x-2/3\"\n                    style={{minWidth: '15vw'}}\n                  />\n                  {i === 1 ? (\n                    <a\n                      href=\"https://michelebruno.github.io/\"\n                      target=\"_blank\"\n                      className=\"inline-block\"\n                      rel=\"noreferrer\"\n                    >\n                      <Image image={t} />\n                    </a>\n                  ) : (\n                    <Image image={t} />\n                  )}\n                </div>\n              ))}\n            </div>\n          </section>\n        </article>\n\n        <nav className=\"relative uppercase hidden lg:block\" id=\"about-nav\">\n          <ul className=\"nav flex flex-col gap-y-2 z-10 sticky top-24\">\n            <li className=\"nav-item\">\n              <Button className=\"nav-link\" href=\"#data\" light>\n                Data\n              </Button>\n            </li>\n            <li className=\"nav-item\">\n              <Button href=\"#interactions\" className=\"nav-link\" light>\n                Interactions\n              </Button>\n            </li>\n            <li className=\"nav-item\">\n              <Button href=\"#team\" className=\"nav-link\" light>\n                The team\n              </Button>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  {\n    images: allFile(filter: {relativeDirectory: {eq: \"about\"}}) {\n      nodes {\n        childImageSharp {\n          gatsbyImageData\n        }\n        id\n        relativePath\n        publicURL\n      }\n    }\n    team: allFile(filter: {relativeDirectory: {eq: \"team\"}}, sort: {fields: [name], order: ASC}) {\n      nodes {\n        childImageSharp {\n          gatsbyImageData\n        }\n        id\n        relativePath\n        publicURL\n      }\n    }\n    meme: allFile(filter: {relativeDirectory: {eq: \"meme\"}}, sort: {fields: [name], order: ASC}) {\n      nodes {\n        childImageSharp {\n          gatsbyImageData\n        }\n        id\n        relativePath\n        publicURL\n      }\n    }\n  }\n`;\n"],"names":["HoverImage","children","image","component","imageUrl","props","imgClassName","className","onMouseMove","e","target","parentNode","querySelector","style","display","transform","clientX","clientY","onMouseLeave","Image","minWidth","transitionDuration","transitionTimingFunction","src","About","data","images","nodes","meme","team","useLayoutEffect","scrollSpy","then","ScrollSpy","document","body","offset","dispose","Layout","container","footer","light","id","find","i","relativePath","JSON","stringify","petitionJson","commentJson","onClick","window","open","map","t","key","publicURL","href","rel","Button","gsap","ScrollTrigger","defaultProps","components"],"sourceRoot":""}
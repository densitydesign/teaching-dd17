{"version":3,"file":"component---src-pages-library-js-ec3b7add9fa7baf6c28c.js","mappings":"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","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/utils/mix.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/library.js","webpack://phase-03/./src/utils/sentences.js"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport {matches, sentenceHasWord} from '../utils/sentences';\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, secondary}) {\n  return (\n    <span\n      className={classNames(\n        'highlighted-word',\n        !promask && !nomask && 'before:bg-light',\n        secondary\n          ? [isActive && 'before:bg-light']\n          : [\n              promask && 'before:bg-promask',\n              nomask && 'before:bg-nomask',\n              isActive && (nomask || promask) && 'text-white',\n            ],\n        !isActive && 'before:scale-x-0',\n        className\n      )}\n    >\n      {children}\n    </span>\n  );\n}\n\nexport default function Comment({\n  id,\n  className,\n  children,\n  origin,\n  sentences,\n  user,\n  createdAt,\n  word,\n  from_now: fromNow,\n  secondWord,\n  petition,\n  highlightWords,\n  large,\n}) {\n  let lastWasSkipped = false;\n\n  return (\n    <div\n      id={id}\n      className={classNames(\n        className,\n        'comment',\n        large ? 'large' : 'mr-4 lg:mr-0',\n        origin === 'promask' && 'border-promask',\n        origin === 'nomask' && 'border-nomask'\n      )}\n    >\n      <div className=\"col-span-2 lg:col-span-1 \">\n        <div className={`rounded-full avatar bg-${origin}`} />\n      </div>\n      <div className=\"col-span-10 lg:col-span-11\">\n        <div\n          className={`text-gray select-none ${\n            large ? 'text-xs lg:text-xl' : 'text-xs 2xl:text-xs'\n          }`}\n        >\n          <span>User{user}</span>\n          {' • '}\n          <span>{fromNow || createdAt}</span>\n        </div>\n        <p\n          className={`comment-text no-scrollbar ${\n            large ? 'text-lg lg:text-3xl leading-snug py-3' : 'py-2 text-sm lg:text-base'\n          }`}\n        >\n          {typeof sentences !== 'undefined'\n            ? sentences.map((sentence, i) => {\n                if (sentenceHasWord(sentence, word) || sentenceHasWord(sentence, secondWord)) {\n                  lastWasSkipped = false;\n                  return (\n                    <React.Fragment key={i}>\n                      {sentence.map((part, i) => {\n                        const isPrimaryWord = matches(part, word);\n                        const isSecondaryWord = matches(part, secondWord);\n\n                        if (isPrimaryWord || isSecondaryWord)\n                          return (\n                            <React.Fragment key={i}>\n                              {' '}\n                              <HighlightedWord\n                                isActive={highlightWords}\n                                promask={origin === 'promask'}\n                                nomask={origin === 'nomask'}\n                                secondary={!isSecondaryWord}\n                              >\n                                {part}\n                              </HighlightedWord>\n                            </React.Fragment>\n                          );\n\n                        if (part === secondWord)\n                          return (\n                            <span key={i} className=\"border-light border-2\">\n                              {part}\n                            </span>\n                          );\n\n                        return part;\n                      })}{' '}\n                    </React.Fragment>\n                  );\n                }\n\n                if (!lastWasSkipped) {\n                  lastWasSkipped = true;\n                  return '[...] ';\n                }\n\n                return undefined;\n              })\n            : children}\n        </p>\n        <a\n          href={petition.slug ? `https://www.change.org/p/${petition.slug}` : undefined}\n          title={petition.title}\n          className={classNames(\n            'text-gray truncate  block ',\n            petition.slug ? ' hover:text-light-darker underline' : 'cursor-default',\n            large ? 'text-xs lg:text-xl' : 'text-xs 2xl:text-xs'\n          )}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {petition.title || 'Petition title'}\n        </a>\n      </div>\n    </div>\n  );\n}\n\nComment.defaultProps = {\n  highlightWords: true,\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nexport default function WordsIndex({words, chosen, setChosen}) {\n  return (\n    <div\n      className={classNames(\n        'duration-500 flex flex-col text-left',\n        chosen.current\n          ? 'hidden lg:block  lg:w-2/12 border-r-2 lg:border-t border-r-white'\n          : 'w-full '\n      )}\n    >\n      <div\n        className={`sticky  overflow-hidden top-0 text-light text-lg lg:text-2xl px-6 lg:px-8 pt-4 pb-4 border-white border-b lg:border-b-2 duration-1000 bg-black select-none lg:whitespace-nowrap ${\n          !chosen.current && 'w-full cursor-pointer'\n        }`}\n        onClick={() => setChosen({})}\n      >\n        <h2 className={classNames('inline-block uppercase ')}>Words</h2>\n        <span className={classNames('ml-2 text-light', chosen.current ? 'hidden' : '')}>\n          <span className=\"\">\n            <span className=\"inline lg:hidden\">/</span>/ 20 most used in promask and nomask comments\n          </span>\n        </span>\n      </div>\n\n      <ul className=\"overflow-y-scroll no-scrollbar flex-1 words-list \">\n        {words.map(({name, finding}, index) => {\n          const isNextSelected =\n            index + 1 < words.length\n              ? words[index + 1].name === chosen.next || words[index + 1].name === chosen.current\n              : false;\n\n          return (\n            <li\n              role=\"listitem\"\n              key={name}\n              onClick={() => (chosen.current !== name ? setChosen({current: name}) : setChosen({}))}\n              className={classNames(\n                'word-item last:border-b-current',\n                !isNextSelected && 'border-b-black ',\n                chosen.current === name ? 'active' : ''\n              )}\n            >\n              <h2 className={classNames('text-lg uppercase')}>{name}</h2>\n              {chosen.current === name && finding && (\n                <p className=\"pt-1 text-base animate__fadeInUp animate__animated max-w-[15.6vw]\">\n                  {finding}\n                </p>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport default function Accordion({onClick, isOpen, children, title, subtitle, tabpanelStyle}) {\n  const panelId = `${title.replace(' ', '-').toLowerCase()}-tabpanel`;\n  return (\n    <div\n      className={`group flex flex-col last:border-t-white last:border-t-2 ${\n        isOpen ? 'min-h-0 flex-1 ' : ''\n      }`}\n    >\n      <div\n        className={classNames(\n          'py-4 px-6 lg:px-8 border-y-white box-border justify-between group select-none cursor-pointer text-light flex',\n          title === 'Related words' && 'hidden lg:flex'\n        )}\n        onClick={onClick}\n        aria-controls={`#${panelId}`}\n        role=\"tab\"\n      >\n        <div className=\"whitespace-nowrap \">\n          <h2 className=\"text-lg lg:text-2xl uppercase inline-block\">{title}</h2>\n          <span\n            className={classNames(\n              'mx-2 leading-none lg:text-xl normal-case inline lg:inline truncate',\n              isOpen ? '' : ' group-active:opacity-100'\n            )}\n          >\n            / {subtitle}\n          </span>\n        </div>\n\n        <div>\n          <svg\n            width=\"25\"\n            height=\"25\"\n            viewBox=\"0 0 25 25\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path d=\"M0 12.5L25 12.5\" stroke=\"currentColor\" strokeWidth=\"2\" />\n            {!isOpen && (\n              <path d=\"M12.5 25L12.5 -1.04308e-06\" stroke=\"currentColor\" strokeWidth=\"2\" />\n            )}\n          </svg>\n        </div>\n      </div>\n\n      <div\n        id={panelId}\n        role=\"tabpanel\"\n        aria-expanded={isOpen}\n        className={classNames('', isOpen ? 'min-h-0 flex-1' : 'h-0 overflow-hidden')}\n        style={tabpanelStyle}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\nAccordion.defaultProps = {\n  onToggle: () => {},\n};\n","function d2h(d) {\n  return d.toString(16);\n} // convert a decimal value to hex\nfunction h2d(h) {\n  return parseInt(h, 16);\n} // convert a hex value to decimal\n\nexport function mix(color1, color2, w) {\n  const weight = typeof w !== 'undefined' ? w : 50; // set the weight to 50%, if that argument is omitted\n\n  let color = '#';\n\n  for (let i = 0; i <= 5; i += 2) {\n    // loop through each of the 3 hex pairs—red, green, and blue\n    const v1 = h2d(color1.substr(i, 2)); // extract the current pairs\n    const v2 = h2d(color2.substr(i, 2));\n\n    // combine the current pairs from each source color, according to the specified weight\n    let val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n\n    while (val.length < 2) {\n      val = `0${val}`;\n    } // prepend a '0' if val results in a single digit\n\n    color += val; // concatenate val to our new color string\n  }\n\n  return color; // PROFIT!\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport {ArchiveButton} from './Button';\nimport {mix} from '../utils/mix';\n\nexport function MaskometerGrid({chosen, words, distribution, onClickSecondWord}) {\n  return (\n    <div className=\"h-full flex flex-col justify-between relative gap-4  \">\n      <p className=\"hidden lg:block mx-8 2xl:mb-4 text-lg\">\n        Horizontal position corresponds to usage by the two groups in the selcted corpus of reasons\n        to sign\n      </p>\n      <div className=\"flex-1 \">\n        <div\n          className={classNames(\n            ' h-full lg:px-8 py-4 flex flex-col justify-between relative',\n            'overflow-hidden uppercase'\n          )}\n        >\n          <div className=\"z-1 \">\n            <p className=\"bg-promask text-white text-sm lg:text-lg text-center h-full absolute top-0 bottom-0 left-0 rotate-180 p-0.5 lg:p-1 z-10 maskometer-label\">\n              Promask\n            </p>\n\n            <p className=\"bg-nomask text-white text-sm lg:text-lg text-center h-full absolute top-0 bottom-0 right-0 p-0.5 lg:p-1 z-10 maskometer-label\">\n              Nomask\n            </p>\n\n            <div className=\"hidden lg:block absolute top-0 bottom-0 right-1/2 translate-x-1/2 border-r-[1px] boreder-r-white border-dashed opacity-50\" />\n\n            <p className=\"hidden lg:block text-lg text-sm 2xl:text-base text-center text-gray select-none absolute top-0 left-0 right-0 w-full normal-case bg-black pb-2\">\n              equally used\n            </p>\n          </div>\n\n          {typeof chosen !== 'undefined' &&\n            chosen.current &&\n            words.nodes.map(({name, deltaNomask}) => {\n              const isCurrent = chosen.next ? chosen.next === name : chosen.current === name;\n\n              let delta = isCurrent\n                ? deltaNomask\n                : distribution.find(({word, secondWord}) => {\n                    if (chosen.next) {\n                      return chosen.next === word && secondWord === name;\n                    }\n                    return chosen.current && word === chosen.current && secondWord === name;\n                  }).nomaskDelta;\n\n              delta = Math.round(delta * 100);\n\n              delta = 3 + ((97 - 3) / 100) * delta;\n\n              return (\n                <div\n                  key={name}\n                  className={classNames(\n                    'mx-5 lg:mx-0 flex items-center relative',\n                    'before:absolute before:left-0 before:right-0 ',\n                    'before:border-b-[1px] before:block before:top-1/2 before:transition-all',\n                    'before:w-full transition-[margin,background-color] duration-500',\n                    isCurrent\n                      ? 'before:border-b-gray  opacity-30'\n                      : 'before:border-b-current  before:opacity-20'\n                  )}\n                >\n                  <ArchiveButton\n                    isCurrent={isCurrent}\n                    style={{\n                      marginLeft: `${delta}%`,\n                      '--gradient-mix': isCurrent ? undefined : mix('EA3C9A', '3514FF', delta),\n                    }}\n                    className=\"transition-[margin] duration-1000 -translate-x-1/2 absolute z-20  \"\n                    onClick={() => onClickSecondWord(name)}\n                  >\n                    <span className=\"hidden lg:inline\">{name}</span>\n                  </ArchiveButton>\n                  <span className=\"absolute w-full text-center z-30 text-sm lg:hidden\">{name}</span>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport classNames from 'classnames';\nimport Comment from './Comment';\nimport {ArchiveButton} from './Button';\nimport {mix} from '../utils/mix';\nimport {sentencesHaveWord} from '../utils/sentences';\n\nfunction GroupCommentList({comments, chosen, secondWord, origin, limit, sentence, onScroll}) {\n  return (\n    <div>\n      <div className=\"flex justify-between lg:hidden py-4 px-6\">\n        <h4 className=\"uppercase text-lg text-light\">{origin}</h4>\n        <p className=\"ml-4 text-xs flex-shrink-1 truncate align-middle self-center\">{sentence}</p>\n      </div>\n      <div\n        key={origin}\n        className=\"flex flex-nowrap items-start overflow-x-scroll snap-x snap-proximity lg:overflow-auto no-scrollbar lg:grid lg:gap-4 px-6 lg:px-8 \"\n        onScroll={onScroll}\n      >\n        {comments.map(\n          (c, i) =>\n            i < limit && (\n              <Comment\n                key={c.commentId}\n                highlightWords\n                word={chosen}\n                className=\"snap-center snap-always\"\n                secondWord={secondWord}\n                {...c}\n              />\n            )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, distribution}) {\n  const scroller = useRef();\n\n  const [limit, setLimit] = useState(100);\n  const [filterOverlay, setFilterOverlay] = useState(false);\n  useEffect(() => {\n    setLimit(100);\n    setFilterOverlay(false);\n    scroller.current?.scrollTo(0, 0);\n  }, [chosen, secondWord]);\n\n  const memoized = useMemo(() => {\n    const result = {};\n    for (const origin of ['promask', 'nomask']) {\n      const thisOriginComments = comments.filter(({origin: o}) => origin === o);\n\n      const f = thisOriginComments.filter(\n        ({sentences}) => !secondWord || sentencesHaveWord(sentences, secondWord)\n      );\n\n      const count = f.length;\n      const percentage = (100 * count) / thisOriginComments.length;\n      const round = percentage > 0.94 ? 0 : 1;\n      const sentence = secondWord ? (\n        `${percentage.toFixed(round)}% of comments in ${origin} (${count} of ${\n          thisOriginComments.length\n        })`\n      ) : (\n        <span>\n          All comments in {origin} <span className=\"hidden md:inline\">petitions</span> ({count})\n        </span>\n      );\n\n      result[origin] = {\n        totalCount: thisOriginComments.length,\n        count,\n        sentence,\n        comments: f,\n        percentage,\n      };\n    }\n    return result;\n  }, [secondWord, chosen, comments]);\n\n  function scrolled(e) {\n    if (e.currentTarget.offsetHeight + e.currentTarget.scrollTop >= e.currentTarget.scrollHeight) {\n      setLimit(l => {\n        if (l <= Math.max(memoized.nomask.comments.length, memoized.promask.comments.length))\n          return l + 200;\n\n        return l;\n      });\n    }\n  }\n\n  return (\n    <div className=\"h-full max-h-full flex flex-col  overflow-y-scroll no-scrollbar lg:overflow-y-visible\">\n      <p className=\"2xl:mb-4 w-full text-sm lg:text-lg px-6 lg:px-8\">\n        Here you can read the comments on the 100 most liked promask and nomask petition\n      </p>\n      <div className=\"w-full top-0 bg-black z-20\">\n        <h2 className=\"text-lg text-light my-4 hidden lg:block px-6 lg:px-8\">\n          Filter opinions by:\n        </h2>\n        <button\n          className=\"text-light border-light border px-2 py-1 my-4 mx-6 lg:hidden\"\n          onClick={() => setFilterOverlay(true)}\n        >\n          Filter opinions by {secondWord && <span className=\"underline\">{secondWord}</span>}\n        </button>\n        <div\n          className={classNames(\n            'absolute top-10 inset-0 lg:static',\n            '',\n            !filterOverlay && 'hidden lg:block'\n          )}\n        >\n          <div className=\"ml-12 lg:ml-0 bg-black border-l border-light p-8 lg:py-0 lg:static lg:border-l-0 h-full\">\n            <div\n              className=\"pb-8 text-light text-xl lg:hidden\"\n              onClick={() => setFilterOverlay(false)}\n            >\n              {'\\u2715'}\n            </div>\n            <div className=\" flex flex-wrap\">\n              {distribution.map(({secondWord: word, nomaskDelta}) => {\n                const isSelected = secondWord === word;\n                const isCurrent = chosen === word;\n\n                return (\n                  <ArchiveButton\n                    key={word}\n                    checkbox\n                    isCurrent={isCurrent}\n                    className=\"mb-2 mr-2\"\n                    isSelected={isSelected}\n                    onClick={() => onChangeSecondWord(isSelected ? undefined : word)}\n                    style={{\n                      '--gradient-mix': mix('EA3C9A', '3514FF', nomaskDelta * 100),\n                    }}\n                  >\n                    {word}\n                  </ArchiveButton>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"\">\n        <div className=\"hidden lg:flex justify-around md:w-11/12 3xl:w-10/12 mx-auto\">\n          {['promask', 'nomask'].map(origin => {\n            const {sentence} = memoized[origin];\n            return (\n              <p key={origin} className=\"sticky top-0 bg-black z-30 text-center text-lg pt-3 pb-4\">\n                {sentence}\n              </p>\n            );\n          })}\n        </div>\n      </div>\n      <div\n        className={classNames('w-full lg:overflow-y-scroll flex-1 pb-8')}\n        id=\"comments-container\"\n        ref={scroller}\n        onScroll={scrolled}\n      >\n        <div className=\"lg:grid lg:grid-cols-2 lg:gap-8 justify-around w-full md:w-11/12 3xl:w-10/12 mx-auto \">\n          {chosen &&\n            ['promask', 'nomask'].map(origin => (\n              <GroupCommentList\n                key={origin}\n                origin={origin}\n                chosen={chosen}\n                secondWord={secondWord}\n                limit={limit}\n                {...memoized[origin]}\n              />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {graphql} from 'gatsby';\nimport classNames from 'classnames';\nimport Layout from '../components/Layout';\nimport WordsIndex from '../components/WordsIndex';\nimport Accordion from '../components/Accordion';\nimport {MaskometerGrid} from '../components/maskometerGrid';\nimport Comments from '../components/Comments';\nimport {sentencesHaveWord} from '../utils/sentences';\nimport allComments from '../unsourced/comments.json';\n\nexport default function Library({data: {words, ...data}}) {\n  const [chosen, setChosen] = useState({});\n  const [secondWord, setSecondWord] = useState();\n  const [mobileList, setMobileList] = useState(false);\n  const [showComments, setShowComments] = useState(false);\n\n  const filteredComments = useMemo(\n    () => allComments.filter(({sentences}) => sentencesHaveWord(sentences, chosen.current)),\n    [chosen]\n  );\n\n  useEffect(() => {\n    if (!showComments && secondWord) setShowComments(true);\n  }, [secondWord]);\n\n  useEffect(() => {\n    if (!chosen.next) setSecondWord();\n\n    setMobileList(false);\n  }, [chosen]);\n\n  const listOfChosenWords = words.nodes.map(x => x.name);\n\n  const distribution = data.distribution.nodes.filter(\n    i => listOfChosenWords.findIndex(x => x === i.secondWord) !== -1\n  );\n\n  return (\n    <Layout\n      wrapperClassName=\"max-h-screen h-screen flex flex-col\"\n      navClassName=\"!text-black\"\n      className=\"flex-1 min-h-0\"\n      tutorial\n    >\n      <div className=\"w-full h-full overflow-hidden flex flex-nowrap border-y-white lg:border-t-2 \">\n        <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen} />\n        <div\n          className={classNames(\n            'overflow-hidden flex flex-col',\n            chosen.current ? 'w-full lg:w-10/12' : 'w-0'\n          )}\n        >\n          <div className=\"relative lg:hidden bg-light text-black uppercase text-center p-1 text-xl\">\n            <h3 onClick={() => setMobileList(!mobileList)}>\n              {chosen.current}{' '}\n              <svg\n                viewBox=\"0 0 63 26\"\n                width=\".8em\"\n                fill=\"none\"\n                className={classNames('inline transition', mobileList && 'rotate-180')}\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path d=\"M61.5 2L32 23.5L1 2\" stroke=\"black\" strokeWidth=\"6\" />\n              </svg>\n            </h3>\n            <ul\n              className={classNames(\n                'overflow-y-scroll no-scrollbar flex-1 words-list absolute left-0 right-0 z-40 top-full bg-black text-white max-h-screen pb-28',\n                !mobileList && 'hidden'\n              )}\n            >\n              {words.nodes.map(({name, finding}, index) => {\n                const isNextSelected =\n                  index + 1 < words.length\n                    ? words[index + 1].name === chosen.next ||\n                      words[index + 1].name === chosen.current\n                    : false;\n\n                return (\n                  chosen.current !== name && (\n                    <li\n                      role=\"listitem\"\n                      key={name}\n                      onClick={() =>\n                        chosen.current !== name ? setChosen({current: name}) : setChosen({})\n                      }\n                      className={classNames(\n                        'word-item last:border-b-current',\n                        !isNextSelected && 'border-b-black '\n                      )}\n                    >\n                      <h2 className={classNames('text-lg uppercase')}>{name}</h2>\n                    </li>\n                  )\n                );\n              })}\n            </ul>\n          </div>\n          <Accordion\n            title=\"Related words\"\n            subtitle={\n              <>\n                usage of words mentioned with <span className=\"uppercase\">{chosen.current}</span>\n              </>\n            }\n            isOpen={!showComments}\n            onClick={() => setShowComments(!showComments)}\n            tabpanelStyle={{minHeight: !showComments ? `${words.nodes.length}rem` : undefined}}\n          >\n            <MaskometerGrid\n              chosen={chosen}\n              words={words}\n              distribution={distribution}\n              onClickSecondWord={setSecondWord}\n            />\n          </Accordion>\n          <Accordion\n            title=\"Comments\"\n            subtitle={\n              <>\n                containing <span className=\"uppercase\">{chosen.current}</span>{' '}\n                {secondWord && (\n                  <span className=\"hidden lg:inline\">\n                    and <span className=\"uppercase\">{secondWord}</span>\n                  </span>\n                )}{' '}\n              </>\n            }\n            isOpen={showComments}\n            onClick={() => setShowComments(!showComments)}\n          >\n            <Comments\n              comments={filteredComments}\n              distribution={distribution.filter(({word}) => word === chosen.current)}\n              chosen={chosen.current}\n              secondWord={secondWord}\n              onChangeSecondWord={setSecondWord}\n            />\n          </Accordion>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}) {\n      nodes {\n        name\n        deltaPromask\n        deltaNomask\n        finding\n      }\n    }\n    distribution: allSheetsCopiaDiDistribuzione(sort: {order: ASC, fields: [secondWord]}) {\n      nodes {\n        word\n        secondWord\n        nomaskDelta\n        promaskDelta\n      }\n    }\n  }\n`;\n","import replacer from '../data/replace.json';\n\nexport function matches(part, word) {\n  if (!part) return false;\n\n  if (part.toLowerCase() === word) {\n    return true;\n  }\n\n  if (part.toLocaleString() === replacer[word]) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function sentenceHasWord(sentence, word) {\n  return sentence.findIndex(p => matches(p, word)) !== -1;\n}\n\nexport function sentencesHaveWord(sentences, word) {\n  for (const sentence of sentences) {\n    if (sentenceHasWord(sentence, word)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","secondary","classNames","Comment","id","origin","sentences","user","createdAt","word","fromNow","from_now","secondWord","petition","highlightWords","large","lastWasSkipped","map","sentence","i","sentenceHasWord","key","part","isPrimaryWord","matches","isSecondaryWord","href","slug","undefined","title","target","rel","defaultProps","WordsIndex","words","chosen","setChosen","current","onClick","index","name","finding","isNextSelected","length","next","role","Accordion","isOpen","subtitle","tabpanelStyle","panelId","replace","toLowerCase","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","style","onToggle","h2d","h","parseInt","mix","color1","color2","w","weight","color","v1","substr","v2","val","Math","floor","toString","MaskometerGrid","distribution","onClickSecondWord","nodes","deltaNomask","isCurrent","delta","find","nomaskDelta","round","marginLeft","GroupCommentList","comments","limit","onScroll","c","commentId","Comments","onChangeSecondWord","scroller","useRef","useState","setLimit","filterOverlay","setFilterOverlay","useEffect","scrollTo","memoized","useMemo","result","thisOriginComments","filter","o","f","sentencesHaveWord","count","percentage","toFixed","totalCount","isSelected","checkbox","ref","e","currentTarget","offsetHeight","scrollTop","scrollHeight","l","max","Library","data","setSecondWord","mobileList","setMobileList","showComments","setShowComments","filteredComments","allComments","listOfChosenWords","x","findIndex","Layout","wrapperClassName","navClassName","tutorial","minHeight","toLocaleString","replacer","p"],"sourceRoot":""}